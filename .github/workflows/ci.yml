name: LumaDesk CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            web/package-lock.json

      - name: Install API dependencies
        run: cd api && npm ci

      - name: Lint API
        run: cd api && npm run lint

      - name: Install Web dependencies
        run: cd web && npm ci

      - name: Lint Web
        run: cd web && npm run lint

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: lumadesk_test
          POSTGRES_USER: lumadesk
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        run: cd api && npm ci

      - name: Run tests
        env:
          DATABASE_URL: postgresql://lumadesk:test@localhost:5432/lumadesk_test
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret
        run: cd api && npm test

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./api/coverage/lcov.info
          flags: api
          name: api-coverage

  build-containers:
    name: Build Docker Containers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api, web, sunshine-service, pxe, client]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.component }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: false
          tags: lumadesk/${{ matrix.component }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-containers]
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file
        run: cp .env.example .env

      - name: Start services
        run: docker-compose up -d

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Check service health
        run: |
          docker-compose ps
          curl -f http://localhost:3000/health
          curl -f http://localhost:8080

      - name: Run integration tests
        run: |
          # Test API authentication
          TOKEN=$(curl -s -X POST http://localhost:3000/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"admin"}' | jq -r .accessToken)

          # Test user creation
          curl -f -X POST http://localhost:3000/api/users \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"username":"testuser","email":"test@test.com","password":"password123","role":"user"}'

      - name: Show logs on failure
        if: failure()
        run: docker-compose logs

      - name: Stop services
        run: docker-compose down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
