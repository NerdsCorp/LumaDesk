#!/bin/bash
# Restore LumaDesk from backup

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"

if [ -z "$1" ]; then
    echo "Usage: $0 <backup-file>"
    echo ""
    echo "Available backups:"
    ls -lh ./backups/*.tar.gz 2>/dev/null || echo "  No backups found"
    exit 1
fi

BACKUP_FILE="$1"

if [ ! -f "$BACKUP_FILE" ]; then
    echo "ERROR: Backup file not found: $BACKUP_FILE"
    exit 1
fi

echo "========================================="
echo "Restoring LumaDesk from backup"
echo "========================================="
echo "Backup: $BACKUP_FILE"
echo ""
echo "WARNING: This will overwrite current data!"
read -p "Continue? (yes/no): " CONFIRM

if [ "$CONFIRM" != "yes" ]; then
    echo "Restore cancelled"
    exit 0
fi

# Stop services
echo "Stopping services..."
docker-compose down

# Create temporary directory
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# Extract backup
echo "Extracting backup..."
tar xzf "$BACKUP_FILE" -C "$TEMP_DIR"

# Restore database
echo "Restoring database..."
docker-compose up -d postgres
sleep 10
cat "$TEMP_DIR/database.sql" | docker-compose exec -T postgres psql -U lumadesk lumadesk

# Restore volumes
echo "Restoring volumes..."
docker run --rm \
    -v lumadesk_postgres-data:/data \
    -v "$TEMP_DIR":/backup \
    alpine sh -c "cd /data && tar xzf /backup/postgres-data.tar.gz"

docker run --rm \
    -v lumadesk_sunshine-config:/data \
    -v "$TEMP_DIR":/backup \
    alpine sh -c "cd /data && tar xzf /backup/sunshine-config.tar.gz"

# Restore configuration
echo "Restoring configuration..."
cp "$TEMP_DIR/env" .env 2>/dev/null || true

# Start services
echo "Starting services..."
docker-compose up -d

echo ""
echo "========================================="
echo "Restore completed successfully!"
echo "========================================="
